// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file proto/event_api/v1/event_api.proto (package proto.event_api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.event_api.v1.CreateEventRequest
 */
export class CreateEventRequest extends Message<CreateEventRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int64 start_time = 2;
   */
  startTime = protoInt64.zero;

  /**
   * @generated from field: int64 end_time = 3;
   */
  endTime = protoInt64.zero;

  /**
   * @generated from field: double latitude = 4;
   */
  latitude = 0;

  /**
   * @generated from field: double longitude = 5;
   */
  longitude = 0;

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from field: string map_id = 7;
   */
  mapId = "";

  constructor(data?: PartialMessage<CreateEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.CreateEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "end_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "map_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined, b: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined): boolean {
    return proto3.util.equals(CreateEventRequest, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.CreateEventResponse
 */
export class CreateEventResponse extends Message<CreateEventResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreateEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.CreateEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventResponse {
    return new CreateEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventResponse | PlainMessage<CreateEventResponse> | undefined, b: CreateEventResponse | PlainMessage<CreateEventResponse> | undefined): boolean {
    return proto3.util.equals(CreateEventResponse, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.GetEventRequest
 */
export class GetEventRequest extends Message<GetEventRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.GetEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventRequest {
    return new GetEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventRequest | PlainMessage<GetEventRequest> | undefined, b: GetEventRequest | PlainMessage<GetEventRequest> | undefined): boolean {
    return proto3.util.equals(GetEventRequest, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.GetEventResponse
 */
export class GetEventResponse extends Message<GetEventResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int64 start_time = 3;
   */
  startTime = protoInt64.zero;

  /**
   * @generated from field: int64 end_time = 4;
   */
  endTime = protoInt64.zero;

  /**
   * @generated from field: double latitude = 5;
   */
  latitude = 0;

  /**
   * @generated from field: double longitude = 6;
   */
  longitude = 0;

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  constructor(data?: PartialMessage<GetEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.GetEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventResponse {
    return new GetEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventResponse {
    return new GetEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventResponse {
    return new GetEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventResponse | PlainMessage<GetEventResponse> | undefined, b: GetEventResponse | PlainMessage<GetEventResponse> | undefined): boolean {
    return proto3.util.equals(GetEventResponse, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.GetAllEventsRequest
 */
export class GetAllEventsRequest extends Message<GetAllEventsRequest> {
  /**
   * @generated from field: string parent_map_id = 1;
   */
  parentMapId = "";

  constructor(data?: PartialMessage<GetAllEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.GetAllEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent_map_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllEventsRequest {
    return new GetAllEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllEventsRequest {
    return new GetAllEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllEventsRequest {
    return new GetAllEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllEventsRequest | PlainMessage<GetAllEventsRequest> | undefined, b: GetAllEventsRequest | PlainMessage<GetAllEventsRequest> | undefined): boolean {
    return proto3.util.equals(GetAllEventsRequest, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.GetAllEventsResponse
 */
export class GetAllEventsResponse extends Message<GetAllEventsResponse> {
  /**
   * @generated from field: repeated proto.event_api.v1.GetEventResponse events = 1;
   */
  events: GetEventResponse[] = [];

  constructor(data?: PartialMessage<GetAllEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.GetAllEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: GetEventResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllEventsResponse {
    return new GetAllEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllEventsResponse {
    return new GetAllEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllEventsResponse {
    return new GetAllEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllEventsResponse | PlainMessage<GetAllEventsResponse> | undefined, b: GetAllEventsResponse | PlainMessage<GetAllEventsResponse> | undefined): boolean {
    return proto3.util.equals(GetAllEventsResponse, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.UpdateEventRequest
 */
export class UpdateEventRequest extends Message<UpdateEventRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int64 start_time = 3;
   */
  startTime = protoInt64.zero;

  /**
   * @generated from field: int64 end_time = 4;
   */
  endTime = protoInt64.zero;

  /**
   * @generated from field: double latitude = 5;
   */
  latitude = 0;

  /**
   * @generated from field: double longitude = 6;
   */
  longitude = 0;

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  constructor(data?: PartialMessage<UpdateEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.UpdateEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "end_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEventRequest {
    return new UpdateEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEventRequest {
    return new UpdateEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEventRequest {
    return new UpdateEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEventRequest | PlainMessage<UpdateEventRequest> | undefined, b: UpdateEventRequest | PlainMessage<UpdateEventRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEventRequest, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.UpdateEventResponse
 */
export class UpdateEventResponse extends Message<UpdateEventResponse> {
  constructor(data?: PartialMessage<UpdateEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.UpdateEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEventResponse {
    return new UpdateEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEventResponse {
    return new UpdateEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEventResponse {
    return new UpdateEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEventResponse | PlainMessage<UpdateEventResponse> | undefined, b: UpdateEventResponse | PlainMessage<UpdateEventResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEventResponse, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.DeleteEventRequest
 */
export class DeleteEventRequest extends Message<DeleteEventRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.DeleteEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEventRequest {
    return new DeleteEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEventRequest {
    return new DeleteEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEventRequest {
    return new DeleteEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEventRequest | PlainMessage<DeleteEventRequest> | undefined, b: DeleteEventRequest | PlainMessage<DeleteEventRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEventRequest, a, b);
  }
}

/**
 * @generated from message proto.event_api.v1.DeleteEventResponse
 */
export class DeleteEventResponse extends Message<DeleteEventResponse> {
  constructor(data?: PartialMessage<DeleteEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_api.v1.DeleteEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEventResponse {
    return new DeleteEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEventResponse {
    return new DeleteEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEventResponse {
    return new DeleteEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEventResponse | PlainMessage<DeleteEventResponse> | undefined, b: DeleteEventResponse | PlainMessage<DeleteEventResponse> | undefined): boolean {
    return proto3.util.equals(DeleteEventResponse, a, b);
  }
}

