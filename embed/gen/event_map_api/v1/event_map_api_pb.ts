// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file event_map_api/v1/event_map_api.proto (package proto.event_map_api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { GetEventResponse } from "../../event_api/v1/event_api_pb.js";

/**
 * @generated from message proto.event_map_api.v1.CreateEventMapRequest
 */
export class CreateEventMapRequest extends Message<CreateEventMapRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateEventMapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.CreateEventMapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventMapRequest {
    return new CreateEventMapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventMapRequest {
    return new CreateEventMapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventMapRequest {
    return new CreateEventMapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventMapRequest | PlainMessage<CreateEventMapRequest> | undefined, b: CreateEventMapRequest | PlainMessage<CreateEventMapRequest> | undefined): boolean {
    return proto3.util.equals(CreateEventMapRequest, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.CreateEventMapResponse
 */
export class CreateEventMapResponse extends Message<CreateEventMapResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreateEventMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.CreateEventMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventMapResponse {
    return new CreateEventMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventMapResponse {
    return new CreateEventMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventMapResponse {
    return new CreateEventMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventMapResponse | PlainMessage<CreateEventMapResponse> | undefined, b: CreateEventMapResponse | PlainMessage<CreateEventMapResponse> | undefined): boolean {
    return proto3.util.equals(CreateEventMapResponse, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.GetEventMapRequest
 */
export class GetEventMapRequest extends Message<GetEventMapRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetEventMapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.GetEventMapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventMapRequest {
    return new GetEventMapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventMapRequest {
    return new GetEventMapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventMapRequest {
    return new GetEventMapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventMapRequest | PlainMessage<GetEventMapRequest> | undefined, b: GetEventMapRequest | PlainMessage<GetEventMapRequest> | undefined): boolean {
    return proto3.util.equals(GetEventMapRequest, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.GetEventMapResponse
 */
export class GetEventMapResponse extends Message<GetEventMapResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string owner_id = 2;
   */
  ownerId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int32 num_events = 4;
   */
  numEvents = 0;

  /**
   * @generated from field: repeated proto.event_api.v1.GetEventResponse events = 5;
   */
  events: GetEventResponse[] = [];

  constructor(data?: PartialMessage<GetEventMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.GetEventMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "num_events", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "events", kind: "message", T: GetEventResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventMapResponse {
    return new GetEventMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventMapResponse {
    return new GetEventMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventMapResponse {
    return new GetEventMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventMapResponse | PlainMessage<GetEventMapResponse> | undefined, b: GetEventMapResponse | PlainMessage<GetEventMapResponse> | undefined): boolean {
    return proto3.util.equals(GetEventMapResponse, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.GetAllEventMapsRequest
 */
export class GetAllEventMapsRequest extends Message<GetAllEventMapsRequest> {
  constructor(data?: PartialMessage<GetAllEventMapsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.GetAllEventMapsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllEventMapsRequest {
    return new GetAllEventMapsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllEventMapsRequest {
    return new GetAllEventMapsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllEventMapsRequest {
    return new GetAllEventMapsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllEventMapsRequest | PlainMessage<GetAllEventMapsRequest> | undefined, b: GetAllEventMapsRequest | PlainMessage<GetAllEventMapsRequest> | undefined): boolean {
    return proto3.util.equals(GetAllEventMapsRequest, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.GetAllEventMapsResponse
 */
export class GetAllEventMapsResponse extends Message<GetAllEventMapsResponse> {
  /**
   * @generated from field: repeated proto.event_map_api.v1.GetEventMapResponse events = 1;
   */
  events: GetEventMapResponse[] = [];

  constructor(data?: PartialMessage<GetAllEventMapsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.GetAllEventMapsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: GetEventMapResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllEventMapsResponse {
    return new GetAllEventMapsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllEventMapsResponse {
    return new GetAllEventMapsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllEventMapsResponse {
    return new GetAllEventMapsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllEventMapsResponse | PlainMessage<GetAllEventMapsResponse> | undefined, b: GetAllEventMapsResponse | PlainMessage<GetAllEventMapsResponse> | undefined): boolean {
    return proto3.util.equals(GetAllEventMapsResponse, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.UpdateEventMapRequest
 */
export class UpdateEventMapRequest extends Message<UpdateEventMapRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateEventMapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.UpdateEventMapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEventMapRequest {
    return new UpdateEventMapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEventMapRequest {
    return new UpdateEventMapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEventMapRequest {
    return new UpdateEventMapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEventMapRequest | PlainMessage<UpdateEventMapRequest> | undefined, b: UpdateEventMapRequest | PlainMessage<UpdateEventMapRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEventMapRequest, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.UpdateEventMapResponse
 */
export class UpdateEventMapResponse extends Message<UpdateEventMapResponse> {
  constructor(data?: PartialMessage<UpdateEventMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.UpdateEventMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEventMapResponse {
    return new UpdateEventMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEventMapResponse {
    return new UpdateEventMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEventMapResponse {
    return new UpdateEventMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEventMapResponse | PlainMessage<UpdateEventMapResponse> | undefined, b: UpdateEventMapResponse | PlainMessage<UpdateEventMapResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEventMapResponse, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.DeleteEventMapRequest
 */
export class DeleteEventMapRequest extends Message<DeleteEventMapRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteEventMapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.DeleteEventMapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEventMapRequest {
    return new DeleteEventMapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEventMapRequest {
    return new DeleteEventMapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEventMapRequest {
    return new DeleteEventMapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEventMapRequest | PlainMessage<DeleteEventMapRequest> | undefined, b: DeleteEventMapRequest | PlainMessage<DeleteEventMapRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEventMapRequest, a, b);
  }
}

/**
 * @generated from message proto.event_map_api.v1.DeleteEventMapResponse
 */
export class DeleteEventMapResponse extends Message<DeleteEventMapResponse> {
  constructor(data?: PartialMessage<DeleteEventMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "proto.event_map_api.v1.DeleteEventMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEventMapResponse {
    return new DeleteEventMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEventMapResponse {
    return new DeleteEventMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEventMapResponse {
    return new DeleteEventMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEventMapResponse | PlainMessage<DeleteEventMapResponse> | undefined, b: DeleteEventMapResponse | PlainMessage<DeleteEventMapResponse> | undefined): boolean {
    return proto3.util.equals(DeleteEventMapResponse, a, b);
  }
}

