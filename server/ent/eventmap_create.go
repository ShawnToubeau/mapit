// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/event"
	"server/ent/eventmap"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

// EventMapCreate is the builder for creating a EventMap entity.
type EventMapCreate struct {
	config
	mutation *EventMapMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner_id" field.
func (emc *EventMapCreate) SetOwnerID(u uuid.UUID) *EventMapCreate {
	emc.mutation.SetOwnerID(u)
	return emc
}

// SetName sets the "name" field.
func (emc *EventMapCreate) SetName(s string) *EventMapCreate {
	emc.mutation.SetName(s)
	return emc
}

// SetExtent sets the "extent" field.
func (emc *EventMapCreate) SetExtent(pg *pgtype.Box) *EventMapCreate {
	emc.mutation.SetExtent(pg)
	return emc
}

// SetID sets the "id" field.
func (emc *EventMapCreate) SetID(u uuid.UUID) *EventMapCreate {
	emc.mutation.SetID(u)
	return emc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (emc *EventMapCreate) SetNillableID(u *uuid.UUID) *EventMapCreate {
	if u != nil {
		emc.SetID(*u)
	}
	return emc
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (emc *EventMapCreate) AddEventIDs(ids ...uuid.UUID) *EventMapCreate {
	emc.mutation.AddEventIDs(ids...)
	return emc
}

// AddEvents adds the "events" edges to the Event entity.
func (emc *EventMapCreate) AddEvents(e ...*Event) *EventMapCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emc.AddEventIDs(ids...)
}

// Mutation returns the EventMapMutation object of the builder.
func (emc *EventMapCreate) Mutation() *EventMapMutation {
	return emc.mutation
}

// Save creates the EventMap in the database.
func (emc *EventMapCreate) Save(ctx context.Context) (*EventMap, error) {
	emc.defaults()
	return withHooks[*EventMap, EventMapMutation](ctx, emc.sqlSave, emc.mutation, emc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (emc *EventMapCreate) SaveX(ctx context.Context) *EventMap {
	v, err := emc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emc *EventMapCreate) Exec(ctx context.Context) error {
	_, err := emc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emc *EventMapCreate) ExecX(ctx context.Context) {
	if err := emc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (emc *EventMapCreate) defaults() {
	if _, ok := emc.mutation.ID(); !ok {
		v := eventmap.DefaultID()
		emc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emc *EventMapCreate) check() error {
	if _, ok := emc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "EventMap.owner_id"`)}
	}
	if _, ok := emc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EventMap.name"`)}
	}
	return nil
}

func (emc *EventMapCreate) sqlSave(ctx context.Context) (*EventMap, error) {
	if err := emc.check(); err != nil {
		return nil, err
	}
	_node, _spec := emc.createSpec()
	if err := sqlgraph.CreateNode(ctx, emc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	emc.mutation.id = &_node.ID
	emc.mutation.done = true
	return _node, nil
}

func (emc *EventMapCreate) createSpec() (*EventMap, *sqlgraph.CreateSpec) {
	var (
		_node = &EventMap{config: emc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: eventmap.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventmap.FieldID,
			},
		}
	)
	if id, ok := emc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := emc.mutation.OwnerID(); ok {
		_spec.SetField(eventmap.FieldOwnerID, field.TypeUUID, value)
		_node.OwnerID = value
	}
	if value, ok := emc.mutation.Name(); ok {
		_spec.SetField(eventmap.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := emc.mutation.Extent(); ok {
		_spec.SetField(eventmap.FieldExtent, field.TypeOther, value)
		_node.Extent = value
	}
	if nodes := emc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventmap.EventsTable,
			Columns: []string{eventmap.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventMapCreateBulk is the builder for creating many EventMap entities in bulk.
type EventMapCreateBulk struct {
	config
	builders []*EventMapCreate
}

// Save creates the EventMap entities in the database.
func (emcb *EventMapCreateBulk) Save(ctx context.Context) ([]*EventMap, error) {
	specs := make([]*sqlgraph.CreateSpec, len(emcb.builders))
	nodes := make([]*EventMap, len(emcb.builders))
	mutators := make([]Mutator, len(emcb.builders))
	for i := range emcb.builders {
		func(i int, root context.Context) {
			builder := emcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, emcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, emcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, emcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (emcb *EventMapCreateBulk) SaveX(ctx context.Context) []*EventMap {
	v, err := emcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emcb *EventMapCreateBulk) Exec(ctx context.Context) error {
	_, err := emcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emcb *EventMapCreateBulk) ExecX(ctx context.Context) {
	if err := emcb.Exec(ctx); err != nil {
		panic(err)
	}
}
