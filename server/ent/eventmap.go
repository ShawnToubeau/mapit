// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/ent/eventmap"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

// EventMap is the model entity for the EventMap schema.
type EventMap struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID uuid.UUID `json:"owner_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// BoundingBox holds the value of the "bounding_box" field.
	BoundingBox *pgtype.Box `json:"bounding_box,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventMapQuery when eager-loading is set.
	Edges EventMapEdges `json:"edges"`
}

// EventMapEdges holds the relations/edges for other nodes in the graph.
type EventMapEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e EventMapEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventMap) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventmap.FieldBoundingBox:
			values[i] = new(pgtype.Box)
		case eventmap.FieldName:
			values[i] = new(sql.NullString)
		case eventmap.FieldID, eventmap.FieldOwnerID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EventMap", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventMap fields.
func (em *EventMap) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventmap.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				em.ID = *value
			}
		case eventmap.FieldOwnerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				em.OwnerID = *value
			}
		case eventmap.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				em.Name = value.String
			}
		case eventmap.FieldBoundingBox:
			if value, ok := values[i].(*pgtype.Box); !ok {
				return fmt.Errorf("unexpected type %T for field bounding_box", values[i])
			} else if value != nil {
				em.BoundingBox = value
			}
		}
	}
	return nil
}

// QueryEvents queries the "events" edge of the EventMap entity.
func (em *EventMap) QueryEvents() *EventQuery {
	return (&EventMapClient{config: em.config}).QueryEvents(em)
}

// Update returns a builder for updating this EventMap.
// Note that you need to call EventMap.Unwrap() before calling this method if this EventMap
// was returned from a transaction, and the transaction was committed or rolled back.
func (em *EventMap) Update() *EventMapUpdateOne {
	return (&EventMapClient{config: em.config}).UpdateOne(em)
}

// Unwrap unwraps the EventMap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (em *EventMap) Unwrap() *EventMap {
	_tx, ok := em.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventMap is not a transactional entity")
	}
	em.config.driver = _tx.drv
	return em
}

// String implements the fmt.Stringer.
func (em *EventMap) String() string {
	var builder strings.Builder
	builder.WriteString("EventMap(")
	builder.WriteString(fmt.Sprintf("id=%v, ", em.ID))
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", em.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(em.Name)
	builder.WriteString(", ")
	builder.WriteString("bounding_box=")
	builder.WriteString(fmt.Sprintf("%v", em.BoundingBox))
	builder.WriteByte(')')
	return builder.String()
}

// EventMaps is a parsable slice of EventMap.
type EventMaps []*EventMap

func (em EventMaps) config(cfg config) {
	for _i := range em {
		em[_i].config = cfg
	}
}
