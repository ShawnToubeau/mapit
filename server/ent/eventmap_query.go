// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"server/ent/event"
	"server/ent/eventmap"
	"server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EventMapQuery is the builder for querying EventMap entities.
type EventMapQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	inters     []Interceptor
	predicates []predicate.EventMap
	withEvents *EventQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventMapQuery builder.
func (emq *EventMapQuery) Where(ps ...predicate.EventMap) *EventMapQuery {
	emq.predicates = append(emq.predicates, ps...)
	return emq
}

// Limit the number of records to be returned by this query.
func (emq *EventMapQuery) Limit(limit int) *EventMapQuery {
	emq.limit = &limit
	return emq
}

// Offset to start from.
func (emq *EventMapQuery) Offset(offset int) *EventMapQuery {
	emq.offset = &offset
	return emq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (emq *EventMapQuery) Unique(unique bool) *EventMapQuery {
	emq.unique = &unique
	return emq
}

// Order specifies how the records should be ordered.
func (emq *EventMapQuery) Order(o ...OrderFunc) *EventMapQuery {
	emq.order = append(emq.order, o...)
	return emq
}

// QueryEvents chains the current query on the "events" edge.
func (emq *EventMapQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: emq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventmap.Table, eventmap.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eventmap.EventsTable, eventmap.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventMap entity from the query.
// Returns a *NotFoundError when no EventMap was found.
func (emq *EventMapQuery) First(ctx context.Context) (*EventMap, error) {
	nodes, err := emq.Limit(1).All(newQueryContext(ctx, TypeEventMap, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventmap.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (emq *EventMapQuery) FirstX(ctx context.Context) *EventMap {
	node, err := emq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventMap ID from the query.
// Returns a *NotFoundError when no EventMap ID was found.
func (emq *EventMapQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = emq.Limit(1).IDs(newQueryContext(ctx, TypeEventMap, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventmap.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (emq *EventMapQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := emq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventMap entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventMap entity is found.
// Returns a *NotFoundError when no EventMap entities are found.
func (emq *EventMapQuery) Only(ctx context.Context) (*EventMap, error) {
	nodes, err := emq.Limit(2).All(newQueryContext(ctx, TypeEventMap, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventmap.Label}
	default:
		return nil, &NotSingularError{eventmap.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (emq *EventMapQuery) OnlyX(ctx context.Context) *EventMap {
	node, err := emq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventMap ID in the query.
// Returns a *NotSingularError when more than one EventMap ID is found.
// Returns a *NotFoundError when no entities are found.
func (emq *EventMapQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = emq.Limit(2).IDs(newQueryContext(ctx, TypeEventMap, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventmap.Label}
	default:
		err = &NotSingularError{eventmap.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (emq *EventMapQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := emq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventMaps.
func (emq *EventMapQuery) All(ctx context.Context) ([]*EventMap, error) {
	ctx = newQueryContext(ctx, TypeEventMap, "All")
	if err := emq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EventMap, *EventMapQuery]()
	return withInterceptors[[]*EventMap](ctx, emq, qr, emq.inters)
}

// AllX is like All, but panics if an error occurs.
func (emq *EventMapQuery) AllX(ctx context.Context) []*EventMap {
	nodes, err := emq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventMap IDs.
func (emq *EventMapQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = newQueryContext(ctx, TypeEventMap, "IDs")
	if err := emq.Select(eventmap.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (emq *EventMapQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := emq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (emq *EventMapQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeEventMap, "Count")
	if err := emq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, emq, querierCount[*EventMapQuery](), emq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (emq *EventMapQuery) CountX(ctx context.Context) int {
	count, err := emq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (emq *EventMapQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeEventMap, "Exist")
	switch _, err := emq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (emq *EventMapQuery) ExistX(ctx context.Context) bool {
	exist, err := emq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventMapQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (emq *EventMapQuery) Clone() *EventMapQuery {
	if emq == nil {
		return nil
	}
	return &EventMapQuery{
		config:     emq.config,
		limit:      emq.limit,
		offset:     emq.offset,
		order:      append([]OrderFunc{}, emq.order...),
		inters:     append([]Interceptor{}, emq.inters...),
		predicates: append([]predicate.EventMap{}, emq.predicates...),
		withEvents: emq.withEvents.Clone(),
		// clone intermediate query.
		sql:    emq.sql.Clone(),
		path:   emq.path,
		unique: emq.unique,
	}
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EventMapQuery) WithEvents(opts ...func(*EventQuery)) *EventMapQuery {
	query := (&EventClient{config: emq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	emq.withEvents = query
	return emq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OwnerID uuid.UUID `json:"owner_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventMap.Query().
//		GroupBy(eventmap.FieldOwnerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (emq *EventMapQuery) GroupBy(field string, fields ...string) *EventMapGroupBy {
	emq.fields = append([]string{field}, fields...)
	grbuild := &EventMapGroupBy{build: emq}
	grbuild.flds = &emq.fields
	grbuild.label = eventmap.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OwnerID uuid.UUID `json:"owner_id,omitempty"`
//	}
//
//	client.EventMap.Query().
//		Select(eventmap.FieldOwnerID).
//		Scan(ctx, &v)
func (emq *EventMapQuery) Select(fields ...string) *EventMapSelect {
	emq.fields = append(emq.fields, fields...)
	sbuild := &EventMapSelect{EventMapQuery: emq}
	sbuild.label = eventmap.Label
	sbuild.flds, sbuild.scan = &emq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventMapSelect configured with the given aggregations.
func (emq *EventMapQuery) Aggregate(fns ...AggregateFunc) *EventMapSelect {
	return emq.Select().Aggregate(fns...)
}

func (emq *EventMapQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range emq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, emq); err != nil {
				return err
			}
		}
	}
	for _, f := range emq.fields {
		if !eventmap.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if emq.path != nil {
		prev, err := emq.path(ctx)
		if err != nil {
			return err
		}
		emq.sql = prev
	}
	return nil
}

func (emq *EventMapQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventMap, error) {
	var (
		nodes       = []*EventMap{}
		_spec       = emq.querySpec()
		loadedTypes = [1]bool{
			emq.withEvents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventMap).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventMap{config: emq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, emq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := emq.withEvents; query != nil {
		if err := emq.loadEvents(ctx, query, nodes,
			func(n *EventMap) { n.Edges.Events = []*Event{} },
			func(n *EventMap, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (emq *EventMapQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*EventMap, init func(*EventMap), assign func(*EventMap, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*EventMap)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(eventmap.EventsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.event_map_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "event_map_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_map_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (emq *EventMapQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := emq.querySpec()
	_spec.Node.Columns = emq.fields
	if len(emq.fields) > 0 {
		_spec.Unique = emq.unique != nil && *emq.unique
	}
	return sqlgraph.CountNodes(ctx, emq.driver, _spec)
}

func (emq *EventMapQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventmap.Table,
			Columns: eventmap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventmap.FieldID,
			},
		},
		From:   emq.sql,
		Unique: true,
	}
	if unique := emq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := emq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventmap.FieldID)
		for i := range fields {
			if fields[i] != eventmap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := emq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := emq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := emq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := emq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (emq *EventMapQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(emq.driver.Dialect())
	t1 := builder.Table(eventmap.Table)
	columns := emq.fields
	if len(columns) == 0 {
		columns = eventmap.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if emq.sql != nil {
		selector = emq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if emq.unique != nil && *emq.unique {
		selector.Distinct()
	}
	for _, p := range emq.predicates {
		p(selector)
	}
	for _, p := range emq.order {
		p(selector)
	}
	if offset := emq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := emq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventMapGroupBy is the group-by builder for EventMap entities.
type EventMapGroupBy struct {
	selector
	build *EventMapQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (emgb *EventMapGroupBy) Aggregate(fns ...AggregateFunc) *EventMapGroupBy {
	emgb.fns = append(emgb.fns, fns...)
	return emgb
}

// Scan applies the selector query and scans the result into the given value.
func (emgb *EventMapGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeEventMap, "GroupBy")
	if err := emgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventMapQuery, *EventMapGroupBy](ctx, emgb.build, emgb, emgb.build.inters, v)
}

func (emgb *EventMapGroupBy) sqlScan(ctx context.Context, root *EventMapQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(emgb.fns))
	for _, fn := range emgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*emgb.flds)+len(emgb.fns))
		for _, f := range *emgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*emgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := emgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventMapSelect is the builder for selecting fields of EventMap entities.
type EventMapSelect struct {
	*EventMapQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ems *EventMapSelect) Aggregate(fns ...AggregateFunc) *EventMapSelect {
	ems.fns = append(ems.fns, fns...)
	return ems
}

// Scan applies the selector query and scans the result into the given value.
func (ems *EventMapSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeEventMap, "Select")
	if err := ems.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventMapQuery, *EventMapSelect](ctx, ems.EventMapQuery, ems, ems.inters, v)
}

func (ems *EventMapSelect) sqlScan(ctx context.Context, root *EventMapQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ems.fns))
	for _, fn := range ems.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ems.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ems.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
