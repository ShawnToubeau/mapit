// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/event_map_api/v1/event_map_api.proto

package event_map_apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "server/gen/proto/event_map_api/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventMapServiceName is the fully-qualified name of the EventMapService service.
	EventMapServiceName = "proto.event_map_api.v1.EventMapService"
)

// EventMapServiceClient is a client for the proto.event_map_api.v1.EventMapService service.
type EventMapServiceClient interface {
	CreateEventMap(context.Context, *connect_go.Request[v1.CreateEventMapRequest]) (*connect_go.Response[v1.CreateEventMapResponse], error)
	GetEventMap(context.Context, *connect_go.Request[v1.GetEventMapRequest]) (*connect_go.Response[v1.GetEventMapResponse], error)
	GetAllEventMaps(context.Context, *connect_go.Request[v1.GetAllEventMapsRequest]) (*connect_go.Response[v1.GetAllEventMapsResponse], error)
	UpdateEventMap(context.Context, *connect_go.Request[v1.UpdateEventMapRequest]) (*connect_go.Response[v1.UpdateEventMapResponse], error)
	DeleteEventMap(context.Context, *connect_go.Request[v1.DeleteEventMapRequest]) (*connect_go.Response[v1.DeleteEventMapResponse], error)
}

// NewEventMapServiceClient constructs a client for the proto.event_map_api.v1.EventMapService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventMapServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventMapServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventMapServiceClient{
		createEventMap: connect_go.NewClient[v1.CreateEventMapRequest, v1.CreateEventMapResponse](
			httpClient,
			baseURL+"/proto.event_map_api.v1.EventMapService/CreateEventMap",
			opts...,
		),
		getEventMap: connect_go.NewClient[v1.GetEventMapRequest, v1.GetEventMapResponse](
			httpClient,
			baseURL+"/proto.event_map_api.v1.EventMapService/GetEventMap",
			opts...,
		),
		getAllEventMaps: connect_go.NewClient[v1.GetAllEventMapsRequest, v1.GetAllEventMapsResponse](
			httpClient,
			baseURL+"/proto.event_map_api.v1.EventMapService/GetAllEventMaps",
			opts...,
		),
		updateEventMap: connect_go.NewClient[v1.UpdateEventMapRequest, v1.UpdateEventMapResponse](
			httpClient,
			baseURL+"/proto.event_map_api.v1.EventMapService/UpdateEventMap",
			opts...,
		),
		deleteEventMap: connect_go.NewClient[v1.DeleteEventMapRequest, v1.DeleteEventMapResponse](
			httpClient,
			baseURL+"/proto.event_map_api.v1.EventMapService/DeleteEventMap",
			opts...,
		),
	}
}

// eventMapServiceClient implements EventMapServiceClient.
type eventMapServiceClient struct {
	createEventMap  *connect_go.Client[v1.CreateEventMapRequest, v1.CreateEventMapResponse]
	getEventMap     *connect_go.Client[v1.GetEventMapRequest, v1.GetEventMapResponse]
	getAllEventMaps *connect_go.Client[v1.GetAllEventMapsRequest, v1.GetAllEventMapsResponse]
	updateEventMap  *connect_go.Client[v1.UpdateEventMapRequest, v1.UpdateEventMapResponse]
	deleteEventMap  *connect_go.Client[v1.DeleteEventMapRequest, v1.DeleteEventMapResponse]
}

// CreateEventMap calls proto.event_map_api.v1.EventMapService.CreateEventMap.
func (c *eventMapServiceClient) CreateEventMap(ctx context.Context, req *connect_go.Request[v1.CreateEventMapRequest]) (*connect_go.Response[v1.CreateEventMapResponse], error) {
	return c.createEventMap.CallUnary(ctx, req)
}

// GetEventMap calls proto.event_map_api.v1.EventMapService.GetEventMap.
func (c *eventMapServiceClient) GetEventMap(ctx context.Context, req *connect_go.Request[v1.GetEventMapRequest]) (*connect_go.Response[v1.GetEventMapResponse], error) {
	return c.getEventMap.CallUnary(ctx, req)
}

// GetAllEventMaps calls proto.event_map_api.v1.EventMapService.GetAllEventMaps.
func (c *eventMapServiceClient) GetAllEventMaps(ctx context.Context, req *connect_go.Request[v1.GetAllEventMapsRequest]) (*connect_go.Response[v1.GetAllEventMapsResponse], error) {
	return c.getAllEventMaps.CallUnary(ctx, req)
}

// UpdateEventMap calls proto.event_map_api.v1.EventMapService.UpdateEventMap.
func (c *eventMapServiceClient) UpdateEventMap(ctx context.Context, req *connect_go.Request[v1.UpdateEventMapRequest]) (*connect_go.Response[v1.UpdateEventMapResponse], error) {
	return c.updateEventMap.CallUnary(ctx, req)
}

// DeleteEventMap calls proto.event_map_api.v1.EventMapService.DeleteEventMap.
func (c *eventMapServiceClient) DeleteEventMap(ctx context.Context, req *connect_go.Request[v1.DeleteEventMapRequest]) (*connect_go.Response[v1.DeleteEventMapResponse], error) {
	return c.deleteEventMap.CallUnary(ctx, req)
}

// EventMapServiceHandler is an implementation of the proto.event_map_api.v1.EventMapService
// service.
type EventMapServiceHandler interface {
	CreateEventMap(context.Context, *connect_go.Request[v1.CreateEventMapRequest]) (*connect_go.Response[v1.CreateEventMapResponse], error)
	GetEventMap(context.Context, *connect_go.Request[v1.GetEventMapRequest]) (*connect_go.Response[v1.GetEventMapResponse], error)
	GetAllEventMaps(context.Context, *connect_go.Request[v1.GetAllEventMapsRequest]) (*connect_go.Response[v1.GetAllEventMapsResponse], error)
	UpdateEventMap(context.Context, *connect_go.Request[v1.UpdateEventMapRequest]) (*connect_go.Response[v1.UpdateEventMapResponse], error)
	DeleteEventMap(context.Context, *connect_go.Request[v1.DeleteEventMapRequest]) (*connect_go.Response[v1.DeleteEventMapResponse], error)
}

// NewEventMapServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventMapServiceHandler(svc EventMapServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.event_map_api.v1.EventMapService/CreateEventMap", connect_go.NewUnaryHandler(
		"/proto.event_map_api.v1.EventMapService/CreateEventMap",
		svc.CreateEventMap,
		opts...,
	))
	mux.Handle("/proto.event_map_api.v1.EventMapService/GetEventMap", connect_go.NewUnaryHandler(
		"/proto.event_map_api.v1.EventMapService/GetEventMap",
		svc.GetEventMap,
		opts...,
	))
	mux.Handle("/proto.event_map_api.v1.EventMapService/GetAllEventMaps", connect_go.NewUnaryHandler(
		"/proto.event_map_api.v1.EventMapService/GetAllEventMaps",
		svc.GetAllEventMaps,
		opts...,
	))
	mux.Handle("/proto.event_map_api.v1.EventMapService/UpdateEventMap", connect_go.NewUnaryHandler(
		"/proto.event_map_api.v1.EventMapService/UpdateEventMap",
		svc.UpdateEventMap,
		opts...,
	))
	mux.Handle("/proto.event_map_api.v1.EventMapService/DeleteEventMap", connect_go.NewUnaryHandler(
		"/proto.event_map_api.v1.EventMapService/DeleteEventMap",
		svc.DeleteEventMap,
		opts...,
	))
	return "/proto.event_map_api.v1.EventMapService/", mux
}

// UnimplementedEventMapServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventMapServiceHandler struct{}

func (UnimplementedEventMapServiceHandler) CreateEventMap(context.Context, *connect_go.Request[v1.CreateEventMapRequest]) (*connect_go.Response[v1.CreateEventMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_map_api.v1.EventMapService.CreateEventMap is not implemented"))
}

func (UnimplementedEventMapServiceHandler) GetEventMap(context.Context, *connect_go.Request[v1.GetEventMapRequest]) (*connect_go.Response[v1.GetEventMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_map_api.v1.EventMapService.GetEventMap is not implemented"))
}

func (UnimplementedEventMapServiceHandler) GetAllEventMaps(context.Context, *connect_go.Request[v1.GetAllEventMapsRequest]) (*connect_go.Response[v1.GetAllEventMapsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_map_api.v1.EventMapService.GetAllEventMaps is not implemented"))
}

func (UnimplementedEventMapServiceHandler) UpdateEventMap(context.Context, *connect_go.Request[v1.UpdateEventMapRequest]) (*connect_go.Response[v1.UpdateEventMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_map_api.v1.EventMapService.UpdateEventMap is not implemented"))
}

func (UnimplementedEventMapServiceHandler) DeleteEventMap(context.Context, *connect_go.Request[v1.DeleteEventMapRequest]) (*connect_go.Response[v1.DeleteEventMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_map_api.v1.EventMapService.DeleteEventMap is not implemented"))
}
