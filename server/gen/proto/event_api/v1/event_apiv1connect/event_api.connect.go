// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/event_api/v1/event_api.proto

package event_apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "server/gen/proto/event_api/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "proto.event_api.v1.EventService"
)

// EventServiceClient is a client for the proto.event_api.v1.EventService service.
type EventServiceClient interface {
	CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error)
	GetEvent(context.Context, *connect_go.Request[v1.GetEventRequest]) (*connect_go.Response[v1.GetEventResponse], error)
	GetAllEvents(context.Context, *connect_go.Request[v1.GetAllEventsRequest]) (*connect_go.Response[v1.GetAllEventsResponse], error)
	UpdateEvent(context.Context, *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error)
	DeleteEvent(context.Context, *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error)
}

// NewEventServiceClient constructs a client for the proto.event_api.v1.EventService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		createEvent: connect_go.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+"/proto.event_api.v1.EventService/CreateEvent",
			opts...,
		),
		getEvent: connect_go.NewClient[v1.GetEventRequest, v1.GetEventResponse](
			httpClient,
			baseURL+"/proto.event_api.v1.EventService/GetEvent",
			opts...,
		),
		getAllEvents: connect_go.NewClient[v1.GetAllEventsRequest, v1.GetAllEventsResponse](
			httpClient,
			baseURL+"/proto.event_api.v1.EventService/GetAllEvents",
			opts...,
		),
		updateEvent: connect_go.NewClient[v1.UpdateEventRequest, v1.UpdateEventResponse](
			httpClient,
			baseURL+"/proto.event_api.v1.EventService/UpdateEvent",
			opts...,
		),
		deleteEvent: connect_go.NewClient[v1.DeleteEventRequest, v1.DeleteEventResponse](
			httpClient,
			baseURL+"/proto.event_api.v1.EventService/DeleteEvent",
			opts...,
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	createEvent  *connect_go.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	getEvent     *connect_go.Client[v1.GetEventRequest, v1.GetEventResponse]
	getAllEvents *connect_go.Client[v1.GetAllEventsRequest, v1.GetAllEventsResponse]
	updateEvent  *connect_go.Client[v1.UpdateEventRequest, v1.UpdateEventResponse]
	deleteEvent  *connect_go.Client[v1.DeleteEventRequest, v1.DeleteEventResponse]
}

// CreateEvent calls proto.event_api.v1.EventService.CreateEvent.
func (c *eventServiceClient) CreateEvent(ctx context.Context, req *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// GetEvent calls proto.event_api.v1.EventService.GetEvent.
func (c *eventServiceClient) GetEvent(ctx context.Context, req *connect_go.Request[v1.GetEventRequest]) (*connect_go.Response[v1.GetEventResponse], error) {
	return c.getEvent.CallUnary(ctx, req)
}

// GetAllEvents calls proto.event_api.v1.EventService.GetAllEvents.
func (c *eventServiceClient) GetAllEvents(ctx context.Context, req *connect_go.Request[v1.GetAllEventsRequest]) (*connect_go.Response[v1.GetAllEventsResponse], error) {
	return c.getAllEvents.CallUnary(ctx, req)
}

// UpdateEvent calls proto.event_api.v1.EventService.UpdateEvent.
func (c *eventServiceClient) UpdateEvent(ctx context.Context, req *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error) {
	return c.updateEvent.CallUnary(ctx, req)
}

// DeleteEvent calls proto.event_api.v1.EventService.DeleteEvent.
func (c *eventServiceClient) DeleteEvent(ctx context.Context, req *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error) {
	return c.deleteEvent.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the proto.event_api.v1.EventService service.
type EventServiceHandler interface {
	CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error)
	GetEvent(context.Context, *connect_go.Request[v1.GetEventRequest]) (*connect_go.Response[v1.GetEventResponse], error)
	GetAllEvents(context.Context, *connect_go.Request[v1.GetAllEventsRequest]) (*connect_go.Response[v1.GetAllEventsResponse], error)
	UpdateEvent(context.Context, *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error)
	DeleteEvent(context.Context, *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.event_api.v1.EventService/CreateEvent", connect_go.NewUnaryHandler(
		"/proto.event_api.v1.EventService/CreateEvent",
		svc.CreateEvent,
		opts...,
	))
	mux.Handle("/proto.event_api.v1.EventService/GetEvent", connect_go.NewUnaryHandler(
		"/proto.event_api.v1.EventService/GetEvent",
		svc.GetEvent,
		opts...,
	))
	mux.Handle("/proto.event_api.v1.EventService/GetAllEvents", connect_go.NewUnaryHandler(
		"/proto.event_api.v1.EventService/GetAllEvents",
		svc.GetAllEvents,
		opts...,
	))
	mux.Handle("/proto.event_api.v1.EventService/UpdateEvent", connect_go.NewUnaryHandler(
		"/proto.event_api.v1.EventService/UpdateEvent",
		svc.UpdateEvent,
		opts...,
	))
	mux.Handle("/proto.event_api.v1.EventService/DeleteEvent", connect_go.NewUnaryHandler(
		"/proto.event_api.v1.EventService/DeleteEvent",
		svc.DeleteEvent,
		opts...,
	))
	return "/proto.event_api.v1.EventService/", mux
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) CreateEvent(context.Context, *connect_go.Request[v1.CreateEventRequest]) (*connect_go.Response[v1.CreateEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_api.v1.EventService.CreateEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) GetEvent(context.Context, *connect_go.Request[v1.GetEventRequest]) (*connect_go.Response[v1.GetEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_api.v1.EventService.GetEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) GetAllEvents(context.Context, *connect_go.Request[v1.GetAllEventsRequest]) (*connect_go.Response[v1.GetAllEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_api.v1.EventService.GetAllEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) UpdateEvent(context.Context, *connect_go.Request[v1.UpdateEventRequest]) (*connect_go.Response[v1.UpdateEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_api.v1.EventService.UpdateEvent is not implemented"))
}

func (UnimplementedEventServiceHandler) DeleteEvent(context.Context, *connect_go.Request[v1.DeleteEventRequest]) (*connect_go.Response[v1.DeleteEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.event_api.v1.EventService.DeleteEvent is not implemented"))
}
